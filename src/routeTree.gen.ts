/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as PrivateRouteImport } from "./routes/_private";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as PrivateBoardsRouteRouteImport } from "./routes/_private/boards/route";
import { Route as ApiAuthSplatRouteImport } from "./routes/api/auth/$";
import { Route as PrivateBoardBoardIdRouteRouteImport } from "./routes/_private/board/$boardId/route";

const PrivateRoute = PrivateRouteImport.update({
  id: "/_private",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const PrivateBoardsRouteRoute = PrivateBoardsRouteRouteImport.update({
  id: "/boards",
  path: "/boards",
  getParentRoute: () => PrivateRoute,
} as any);
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootRouteImport,
} as any);
const PrivateBoardBoardIdRouteRoute =
  PrivateBoardBoardIdRouteRouteImport.update({
    id: "/board/$boardId",
    path: "/board/$boardId",
    getParentRoute: () => PrivateRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/boards": typeof PrivateBoardsRouteRoute;
  "/board/$boardId": typeof PrivateBoardBoardIdRouteRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/boards": typeof PrivateBoardsRouteRoute;
  "/board/$boardId": typeof PrivateBoardBoardIdRouteRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/_private": typeof PrivateRouteWithChildren;
  "/_private/boards": typeof PrivateBoardsRouteRoute;
  "/_private/board/$boardId": typeof PrivateBoardBoardIdRouteRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/boards" | "/board/$boardId" | "/api/auth/$";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/boards" | "/board/$boardId" | "/api/auth/$";
  id:
    | "__root__"
    | "/"
    | "/_private"
    | "/_private/boards"
    | "/_private/board/$boardId"
    | "/api/auth/$";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  PrivateRoute: typeof PrivateRouteWithChildren;
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_private": {
      id: "/_private";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PrivateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_private/boards": {
      id: "/_private/boards";
      path: "/boards";
      fullPath: "/boards";
      preLoaderRoute: typeof PrivateBoardsRouteRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_private/board/$boardId": {
      id: "/_private/board/$boardId";
      path: "/board/$boardId";
      fullPath: "/board/$boardId";
      preLoaderRoute: typeof PrivateBoardBoardIdRouteRouteImport;
      parentRoute: typeof PrivateRoute;
    };
  }
}

interface PrivateRouteChildren {
  PrivateBoardsRouteRoute: typeof PrivateBoardsRouteRoute;
  PrivateBoardBoardIdRouteRoute: typeof PrivateBoardBoardIdRouteRoute;
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateBoardsRouteRoute: PrivateBoardsRouteRoute,
  PrivateBoardBoardIdRouteRoute: PrivateBoardBoardIdRouteRoute,
};

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRoute: PrivateRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

import type { getRouter } from "./router.tsx";
import type { startInstance } from "./start.ts";
declare module "@tanstack/react-start" {
  interface Register {
    ssr: true;
    router: Awaited<ReturnType<typeof getRouter>>;
    config: Awaited<ReturnType<typeof startInstance.getOptions>>;
  }
}
